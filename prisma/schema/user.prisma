model User {
  id     String   @id
  lang   String?
  hoster Boolean  @default(false)
  nick   String?
  guilds String[] @default([])

  badge      UserBadges[]
  modules    UserModules[]
  warns      UserWarns[]
  pre_warns  UserPreWarns[]
  statements UserStatement[]

  erase    UserOptionsErase @relation(fields: [erase_id], references: [id])
  erase_id Int              @unique

  social    UserOptionsSocial @relation(fields: [social_id], references: [id])
  social_id Int               @unique

  profile    UserOptionsProfile @relation(fields: [profile_id], references: [id])
  profile_id Int                @unique

  misc    UserOptionsMisc @relation(fields: [misc_id], references: [id])
  misc_id Int             @unique

  conf    UserOptionsConf @relation(fields: [conf_id], references: [id])
  conf_id Int             @unique

  rank_global    UserRankGlobal @relation(fields: [rank_global_id], references: [id])
  rank_global_id Int            @unique

  rank_guild    UserRankGuild @relation(fields: [rank_guild_id], references: [id])
  rank_guild_id Int           @unique
}

model UserOptionsErase {
  id            Int     @id @default(autoincrement())
  erase_on      Int?
  valid         Boolean @default(false)
  forced        Boolean @default(false)
  timeout       Int     @default(2)
  guild_timeout Int     @default(2)
  user          User?
}

model UserOptionsSocial {
  id           Int     @id @default(autoincrement())
  steam        String?
  lastfm       String?
  pula_predios String?
  user         User?
}

model UserOptionsProfile {
  id          Int     @id @default(autoincrement())
  avatar      String?
  about       String?
  join        Boolean @default(true)
  creation    Boolean @default(true)
  bank        Boolean @default(true)
  lastfm      Boolean @default(false)
  steam       Boolean @default(false)
  thumbnail   String?
  cache_about String?
  user        User?
}

model UserOptionsMisc {
  id          Int     @id @default(autoincrement())
  color       String  @default("#29BB8E")
  daily       String?
  money       Int     @default(0)
  embed       String  @default("#29BB8E")
  locale      String?
  weather     Boolean @default(true)
  fixed_badge Int?
  second_lang String?
  user        User?
}

model UserOptionsConf {
  id            Int     @id @default(autoincrement())
  banned        Boolean @default(false)
  ghost_mode    Boolean @default(false)
  notify        Boolean @default(false)
  ranking       Boolean @default(true)
  global_tasks  Boolean @default(true)
  public_badges Boolean @default(true)
  resumed       Boolean @default(false)
  cached_guilds Boolean @default(false)
  user          User?
}

model UserRankGlobal {
  id        Int     @id @default(autoincrement())
  server_id String?
  nickname  String?
  xp        Int     @default(0)
  user      User?
}

model UserRankGuild {
  id                Int     @id @default(autoincrement())
  server_id         String?
  nickname          String?
  lastInteraction   Int?
  warns             Int     @default(0)
  caldeira_de_ceira Boolean @default(false)
  xp                Int     @default(0)
  ixp               Int     @default(0)
  erase_valid       Boolean @default(false)
  erase_on          Int?
  user              User?
}

model UserBadges {
  id        Int @id @default(autoincrement())
  badge     Int
  timestamp Int

  user    User?  @relation(fields: [user_id], references: [id])
  user_id String
}

model UserModules {
  id        Int     @id @default(autoincrement())
  type      Int
  timestamp Int
  price     Int     @default(20)
  data      Int?
  days      Int?
  hour      String?
  active    Boolean @default(false)

  user    User?  @relation(fields: [user_id], references: [id])
  user_id String
}

model UserPreWarns {
  id            Int     @id @default(autoincrement())
  server_id     String
  valid         Boolean @default(false)
  timeout       Boolean @default(true)
  nick          String?
  assigner      String?
  assigner_nick String?
  relatory      String?
  timestamp     Int

  user    User?  @relation(fields: [user_id], references: [id])
  user_id String
}

model UserWarns {
  id            Int     @id @default(autoincrement())
  server_id     String
  nick          String?
  hierarchy     Boolean @default(false)
  valid         Boolean @default(false)
  timeout       Boolean @default(true)
  assigner      String?
  assigner_nick String?
  relatory      String?
  timestamp     Int

  user    User?  @relation(fields: [user_id], references: [id])
  user_id String
}

model UserReports {
  user_id   String
  server_id String

  nick        String?
  issuer      String?
  issuer_nick String?
  relatory    String?
  timestamp   Int?
  archived    Boolean @default(false)
  auto        Boolean @default(false)

  @@id([user_id, server_id])
}

model UserRoles {
  user_id   String
  server_id String
  role_id   String

  nick          String?
  valid         Boolean @default(false)
  timeout       Int     @default(5)
  assigner      String?
  assigner_nick String?
  relatory      String?
  timestamp     Int?

  @@id([user_id, server_id, role_id])
}

model UserStatement {
  id        Int     @id @default(autoincrement())
  operation String?
  type      Boolean @default(false)
  value     Float   @default(0)
  timestamp Int?

  user    User?  @relation(fields: [user_id], references: [id])
  user_id String
}

model UserStrikes {
  user_id   String
  server_id String
  strikes   Int    @default(0)

  @@id([user_id, server_id])
}

model UserTasks {
  id          Int     @id @default(autoincrement())
  user_id     String
  server_id   String
  text        String
  timestamp   Int
  g_timestamp Int?
  concluded   Boolean @default(false)
}

model UserTasksGroup {
  id        Int    @id @default(autoincrement())
  user_id   String
  server_id String
  name      String
  timestamp Int
}

model UserTickets {
  user_id   String
  server_id String

  channel_id String?

  @@id([user_id, server_id])
}
